StatusComputed,
PaymentAmount,
TotalDistance as Distance,
DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) AS YearsOld,
Gender,
NativeOS,
DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) AS DaysAfter
FROM [MYH].[dbo].[ChallengeAthlete] ca
INNER JOIN [MYH].[dbo].[Athlete] a on ca.AthleteId = a.AthleteId
INNER JOIN [MYH].[dbo].[Challenge] c on ca.ChallengeId = c.ChallengeId
WHERE PaymentAmount > 5 AND ChallengeCompletedDate IS NOT NULL
AND DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) BETWEEN 0 AND 365
AND DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) BETWEEN 0 AND 110")
daysANDage <- Training %>%
ggplot()+
geom_point(aes(x = YearsOld, y= DaysAfter, color=Distance))
daysANDage
daysANDage <- Training %>%
ggplot()+
geom_jitter(aes(x = YearsOld, y= DaysAfter, color=Distance, aes=1/10))
daysANDage
daysANDage <- Training %>%
ggplot()+
geom_jitter(aes(x = YearsOld, y= DaysAfter, color=Distance, aes=1/(as.integer(nrow(Training)))))
daysANDage
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
daysANDdistance
daysANDdistance <- Training %>%
ggplot()+
geom_jitter(aes(x=Distance,y=DaysAfter,shape=gender,alpha=setAlpha))
daysANDdistance
daysANDdistance <- Training %>%
ggplot()+
geom_jitter(aes(x=Distance,y=DaysAfter,shape=Gender,alpha=setAlpha))
daysANDdistance
daysANDdistance <- Training %>%
ggplot()+
geom_jitter(aes(x=Distance,y=DaysAfter,color=Gender,alpha=setAlpha))
View(daysANDdistance)
daysANDdistance
daysANDdistance
source('~/Yes.Fit/OpeningWeekPrediction/whenWillTheyFinish.R', echo=TRUE)
source('~/Yes.Fit/OpeningWeekPrediction/whenWillTheyFinish.R', echo=TRUE)
daysANDnativeos <- Training %>%
ggplot()+
geom_bar(aes(x=NativeOS,y=DaysAfter))
daysANDage
daysANDdistance
daysANDnativeos
source('~/Yes.Fit/OpeningWeekPrediction/whenWillTheyFinish.R', echo=TRUE)
daysANDnativeos <- Training %>%
ggplot()+
geom_col(aes(x=NativeOS,y=DaysAfter))
daysANDnativeos
TEST <- dbGetQuery(con,"SELECT ca.AthleteId,
ca.CreateTS,
StatusComputed,
TotalDistance as Distance,
DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) AS YearsOld,
Gender,
NativeOS,
DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) AS DaysAfter
FROM [MYH].[dbo].[ChallengeAthlete] ca
INNER JOIN [MYH].[dbo].[Athlete] a on ca.AthleteId = a.AthleteId
INNER JOIN [MYH].[dbo].[Challenge] c on ca.ChallengeId = c.ChallengeId
WHERE PaymentAmount > 5 AND ChallengeCompletedDate IS NULL
AND DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) BETWEEN 0 AND 365
AND DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) BETWEEN 0 AND 110
AND TotalDistance BETWEEN 1 AND 100")
# SQL Import --------------------------------------------------------------
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "sql.yes.fit",
Database = "master",
UID = "ReadonlyLogin",
PWD = "zeR5RaMacr7J")
Training <- dbGetQuery(con,"SELECT ca.AthleteId,
ca.CreateTS,
StatusComputed,
TotalDistance as Distance,
DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) AS YearsOld,
Gender,
NativeOS,
DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) AS DaysAfter
FROM [MYH].[dbo].[ChallengeAthlete] ca
INNER JOIN [MYH].[dbo].[Athlete] a on ca.AthleteId = a.AthleteId
INNER JOIN [MYH].[dbo].[Challenge] c on ca.ChallengeId = c.ChallengeId
WHERE PaymentAmount > 5 AND ChallengeCompletedDate IS NOT NULL
AND DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) BETWEEN 0 AND 365
AND DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) BETWEEN 0 AND 110
AND TotalDistance BETWEEN 1 AND 100")
Testing <- dbGetQuery(con,"SELECT ca.AthleteId,
ca.CreateTS,
StatusComputed,
TotalDistance as Distance,
DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) AS YearsOld,
Gender,
NativeOS,
DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) AS DaysAfter
FROM [MYH].[dbo].[ChallengeAthlete] ca
INNER JOIN [MYH].[dbo].[Athlete] a on ca.AthleteId = a.AthleteId
INNER JOIN [MYH].[dbo].[Challenge] c on ca.ChallengeId = c.ChallengeId
WHERE PaymentAmount > 5 AND ChallengeCompletedDate IS NULL
AND DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) BETWEEN 0 AND 365
AND DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) BETWEEN 0 AND 110
AND TotalDistance BETWEEN 1 AND 100")
View(Testing)
View(Testing)
Testing <- dbGetQuery(con,"SELECT ca.AthleteId,
ca.CreateTS,
StatusComputed,
TotalDistance as Distance,
DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) AS YearsOld,
Gender,
NativeOS,
DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) AS DaysAfter
FROM [MYH].[dbo].[ChallengeAthlete] ca
INNER JOIN [MYH].[dbo].[Athlete] a on ca.AthleteId = a.AthleteId
INNER JOIN [MYH].[dbo].[Challenge] c on ca.ChallengeId = c.ChallengeId
WHERE PaymentAmount > 5 AND ChallengeCompletedDate IS NULL
AND DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) BETWEEN 0 AND 110
AND TotalDistance BETWEEN 1 AND 100")
View(Testing)
View(Testing)
source('~/Yes.Fit/OpeningWeekPrediction/whenWillTheyFinish.R', echo=TRUE)
source('~/Yes.Fit/OpeningWeekPrediction/whenWillTheyFinish.R', echo=TRUE)
# Resampling Train Testing -----------------------------------------------------------
trainIndex <- createDataPartition(Training, p=0.8,list=FALSE,times=1)
Training_SplitA <- Training[trainIndex,]
Training_SplitB <- Training[-trainIndex,]
# SQL Import --------------------------------------------------------------
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "sql.yes.fit",
Database = "master",
UID = "ReadonlyLogin",
PWD = "zeR5RaMacr7J")
Training <- dbGetQuery(con,"SELECT ChallengeAthleteId,
ca.AthleteId,
ca.CreateTS,
TotalDistance as Distance,
DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) AS YearsOld,
Gender,
NativeOS,
DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) AS DaysAfter
FROM [MYH].[dbo].[ChallengeAthlete] ca
INNER JOIN [MYH].[dbo].[Athlete] a on ca.AthleteId = a.AthleteId
INNER JOIN [MYH].[dbo].[Challenge] c on ca.ChallengeId = c.ChallengeId
WHERE PaymentAmount > 5 AND ChallengeCompletedDate IS NOT NULL
AND DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) BETWEEN 0 AND 365
AND DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) BETWEEN 0 AND 110
AND TotalDistance BETWEEN 1 AND 100")
Testing <- dbGetQuery(con,"SELECT ChallengeAthleteId,
ca.AthleteId,
ca.CreateTS,
TotalDistance as Distance,
DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) AS YearsOld,
Gender,
NativeOS,
DATEDIFF(\"D\",ca.CreateTS, ChallengeCompletedDate) AS DaysAfter
FROM [MYH].[dbo].[ChallengeAthlete] ca
INNER JOIN [MYH].[dbo].[Athlete] a on ca.AthleteId = a.AthleteId
INNER JOIN [MYH].[dbo].[Challenge] c on ca.ChallengeId = c.ChallengeId
WHERE PaymentAmount > 5 AND ChallengeCompletedDate IS NULL
AND DATEDIFF(\"YEAR\",DateOfBirth,GETDATE()) BETWEEN 0 AND 110
AND TotalDistance BETWEEN 1 AND 100")
# Training Wrangling -------------------------------------------------------
averageAge <- Training %>% filter(!is.na(YearsOld)) %>% summarise(mean(YearsOld))
Training$Gender <- mapvalues(Training$Gender, from=c(1,2,NA,3), to = c("Male","Female","None","Other"))
Training$YearsOld[is.na(Training$YearsOld)] <- as.integer(averageAge)
Training$NativeOS[is.na(Training$NativeOS)] <- "browser"
# Resampling Train Testing -----------------------------------------------------------
trainIndex <- createDataPartition(Training$ChallengeAthleteId, p=0.8,list=FALSE,times=1)
Training_SplitA <- Training[trainIndex,]
Training_SplitB <- Training[-trainIndex,]
# Training ----------------------------------------------------------------
whenWillTheyFinish <- train(DaysAfter ~ ., data=Training_SplitA,method="lm")
summary(whenWillTheyFinish)
# Testing -----------------------------------------------------------------
#predict(whenWillTheyFinish, Training_SplitB)
summary(predict(whenWillTheyFinish, Training_SplitB)-Training_SplitB$DaysAfter)
plot(whenWillTheyFinish)
show(whenWillTheyFinish)
summary(whenWillTheyFinish)
source('~/Yes.Fit/OpeningWeekPrediction/whenWillTheyFinish.R', echo=TRUE)
source('~/Yes.Fit/OpeningWeekPrediction/whenWillTheyFinish.R', echo=TRUE)
# Testing -----------------------------------------------------------------
PredidctedvsActual <- mutate(predicted = predict(whenWillTheyFinish, Training_SplitB))
Testing$DaysAfter <- predict(whenWillTheyFinish, Testing)
View(Testing)
View(Testing)
source('~/Yes.Fit/OpeningWeekPrediction/whenWillTheyFinish.R', echo=TRUE)
Testing %>% filter(ChallengeId==265) %>% View()
lm(formula = medalspurchased30 ~ .)
?lm
lm(formulat = medalspurchased30 ~ , data=challenge)
lm(formula = medalspurchased30 ~ , data=challenge)
lm(formula = medalspurchased30 ~ , data=challenge)
lm(formula = medalspurchased30 ~ ,challenge)
lm(formula = medalspurchased30 ~. ,challenge)
train(medalspurchased30 ~ ., data=challenge, method="lm")
source('~/Yes.Fit/CNY/base.R', echo=TRUE)
account_list <- ga_account_list()
#View(account_list) # Which sources you are allowed to pull from, use viewID to select source.
ga_id <- 147159762 # Setting the source
setMet <- c("1dayUsers")
activeUsers <- gadata <- google_analytics(viewId = ga_id, date_range = c(Sys.Date()-1000,
Sys.Date()-1), metrics = setMet,
dimensions = "date")
setMet <- c("newUsers")
newUsers <- gadata <- google_analytics(viewId = ga_id, date_range = c(Sys.Date()-1000,
Sys.Date()-1), metrics = setMet,
dimensions = "date")
#Define a function that will get the current months active users
activeUsers30 <- function(){
return(activeUsers %>% filter(date >= Sys.Date()-30) %>% summarise(sum(`1dayUsers`)))
}
#Define a function that will get the current months new users
newUsers30 <- function(){
return(newUsers %>% filter(date >= Sys.Date()-30) %>% summarise(sum(`newUsers`)))
}
challenge$newU <- as.integer(newUsers30())
challenge$activeU <- as.integer(activeUsers30())
#Define a function that returns the number of medals purchased in the last 30 days
challenge$medalspurchased30 <- 0
for (i in 1:(as.integer(nrow(challenge)))){
challenge[i,6] <- as.integer(medals %>% filter(ChallengeId == challenge[i,1] & DateSignedUp >= (Sys.Date()-30)) %>% nrow())
}
#Define a function that returns the number of medals purchased in the last 3 months
challenge$medalspurchased90 <- 0
for (i in 1:(as.integer(nrow(challenge)))){
challenge[i,7] <- as.integer(medals %>% filter(ChallengeId == challenge[i,1] & DateSignedUp >= (Sys.Date()-90)) %>% nrow())
}
train(medalspurchased30 ~ ., data=challenge, method="lm")
library(caret)
install.packages("RccpRoll")
train(medalspurchased30 ~ ., data=challenge, method="lm")
install.packages("caret")
train(medalspurchased30 ~ ., data=challenge, method="lm")
library(caret)
lm(formula = medalspurchased30 ~ Price, challenge)
model <-  lm(formula = medalspurchased30 ~ Price + TotalDistance + newU + activeU , challenge)
summary(model)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
test <-  GET("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5b894bfd11fc3b001874c38c/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&start_date=2012-05-31%2003%3A51%3A28.140")
test
test1 <- fromJSON(test1)
test1 <- fromJSON(test)
test1 <- fromJSON(content(test, "text"))
View(test1)
test2 <- as.data.frame(test1)
test2 <- as.data.frame(content(test, "text"))
View(test2)
test2 <- as.data.frame(content(test1, "text"))
test2 <- as.data.frame(test1)
test2 <- as.data.frame(test)
ces_text
test <-  GET("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5b894bfd11fc3b001874c38c/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&start_date=2012-05-31%2003%3A51%3A28.140")
ces_text
test <-  GET("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5b894bfd11fc3b001874c38c/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&start_date=2012-05-31%2003%3A51%3A28.140")
test_text <- content(test, "text")
test_json <- fromJSON(test_text, flatten_ TRUE)
test_json <- fromJSON(test_text, flatten = TRUE)
test_df <- as.data.frame(test_json)
View(test_json)
test_json <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5b894bfd11fc3b001874c38c/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&start_date=2012-05-31%2003%3A51%3A28.140")
test_df <- as.data.frame(test_json)
View(test1)
test_df <- as.data.frame(test_json$routine)
View(test_df)
test_json <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/599e43e784cf4c43d702c46a/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test_df <- as.data.frame(test_json$routine)
View(test_json)
test_json <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/599e43e784cf4c43d702c46a/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test_df <- as.data.frame(test_json$routine)
View(test_df)
View(test_json)
test_json <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5b5db10916aa51001bf4de62/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test_df <- as.data.frame(test_json$routine)
View(test_df)
View(test_df)
test_json <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5b5db10916aa51001bf4de62/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test_df <- as.data.frame(test_json$routine)
test_json1 <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5bba0a5aefde30001e2088e5/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test_df1 <- as.data.frame(test_json1$routine)
View(test_json1)
test_json1 <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5bc1ca5defde300019122fd7/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test_df1 <- as.data.frame(test_json1$routine)
full <- merge(test_df, test_df1)
full <- rbind(test_df, test_df1)
View(full)
library(RODBC)
library(ODBC)
library(odbc)
Athlete <- dbGetQuery(con, "SELECT CreateTS as DateSignedUp,
ValidicId,
ValidicAccessToken
FROM MYH.dbo.Athlete
WHERE ValidicId IS NOT NULL")
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "sql.yes.fit",
Database = "master",
UID = "ReadonlyLogin",
PWD = "zeR5RaMacr7J")
Athlete <- dbGetQuery(con, "SELECT CreateTS as DateSignedUp,
ValidicId,
ValidicAccessToken
FROM MYH.dbo.Athlete
WHERE ValidicId IS NOT NULL")
source('~/.active-rstudio-document', echo=TRUE)
print(Athlete$ValidicId)
View(Athlete)
print(Athlete[i,2])
print("hello" + Athlete[1,2])
print("hello", Athlete[1,2])
temp <- as.data.frame(fromJSON(url)$fitness)
test <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5bc1ca5defde300019122fd7/fitness.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test_df <- as.data.frame(test$fitness)
View(test)
test <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5bc1ca5defde300019122fd7/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test_df <- as.data.frame(test$fitness)
test_df <- as.data.frame(test$routine)
View(test_df)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
test <- fromJSON(url)
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[i,2],"/fitness.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65"
test <- fromJSON(url)
temp <- as.data.frame(test$routine)
full <- rbind(full, temp)
}
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[i,2],"/fitness.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
temp <- as.data.frame(test$routine)
full <- rbind(full, temp)
source('~/.active-rstudio-document', echo=TRUE)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[1,2],"/fitness.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
full <- as.data.frame(test$routine)
for (i in 2:as.integer(nrow(Athlete))) {
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[i,2],"/fitness.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
temp <- as.data.frame(test$routine)
full <- rbind(full, temp)
}
for (i in 2:20) {
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[i,2],"/fitness.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
temp <- as.data.frame(test$routine)
full <- rbind(full, temp)
}
View(full)
8
test <- fromJSON(url)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[1,2],"/fitness.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
full <- as.data.frame(test$routine)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[44,2],"/fitness.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
full <- as.data.frame(test$routine)
View(test)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[44,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
full <- as.data.frame(test$routine)
View(test)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[1,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
View(test)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com//v1/organizations/59838783ff9d93000c0000b4/routine")
test <- fromJSON(url)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("GET /v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[1,2],"/routine")
test <- fromJSON(url)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[1,2],"/routine")
test <- fromJSON(url)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("	https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[1,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[1,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
full <- as.data.frame(test$routine)
View(test)
test <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5b5db10916aa51001bf4de62/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&expanded=1")
full <- as.data.frame(test$routine)
View(test)
View(full)
View(test)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[1,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&expanded=1")
test <- fromJSON(url)
full <- as.data.frame(test$routine)
View(test)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[45,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&expanded=1")
test <- fromJSON(url)
full <- as.data.frame(test$routine)
View(full)
for (i in 2:20) {
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[i,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&expanded=1")
test <- fromJSON(url)
temp <- as.data.frame(test$routine)
full <- rbind(full, temp)
}
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[2,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&expanded=1")
test <- fromJSON(url)
temp <- as.data.frame(test$routine)
full <- rbind(full, temp)
View(temp)
View(test)
View(test)
View(temp)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[45,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
full <- as.data.frame(test$routine)
for (i in 2:20) {
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[2,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
temp <- as.data.frame(test$routine)
full <- rbind(full, temp)
}
View(full)
# API Import --------------------------------------------------------------
# Here we will pull data from everyone in the Athlete table and insert their ValidicId into the GET statement
# We will then bind all their routine tables together
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[1,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
full <- as.data.frame(test$routine)
for (i in 2:20) {
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[i,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
temp <- as.data.frame(test$routine)
full <- rbind(full, temp)
}
View(full)
for (i in 2:2000) {
url <- paste0("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/",Athlete[i,2],"/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON(url)
temp <- as.data.frame(test$routine)
full <- rbind(full, temp)
}
View(full)
library(httr)
library(jsonlite)
library(odbc)
test <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/fitness")
test <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/fitness/access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON("https://api.validic.com/v1/fitness.json?authentication_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
#ValidicAccessToken = "d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65"
#OrganizationId = "59838783ff9d93000c0000b4"
validtation <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON("https://api.validic.com/v1/fitness.json?authentication_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
test <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/users/5b43d20b4d35900021799b93/routine.json?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&expanded=0")
View(test)
full <- as.data.frame(test$routine)
View(full)
View(test)
test <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/routine?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65")
full <- as.data.frame(test$routine)
View(full)
test <- fromJSON("https://api.validic.com/v1/organizations/59838783ff9d93000c0000b4/routine?access_token=d05fa23aff771a7df5d8648e7080fceaa11b5b4a50762efbdbd5475815d86d65&limit=1000000")
full <- as.data.frame(test$routine)
library(caret)
install.packages("installr")
R --version
R.version()
library(caret)
setwd("~/TitanicSurvivors")
train <- read.csv("train.csv", stringsAsFactors=FALSE)
featurePlot(x = train[,1:11],
y = train$Survived,
plot = "pairs")
featurePlot(x = train[,1:11],
y = train$Survived,
plot = "scatter")
